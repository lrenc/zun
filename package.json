{
  "name": "zun",
  "version": "1.2.1",
  "description": "前端代码格式化工具",
  "main": "index.js",
  "scripts": {
    "test": "npm run lint && npm run coverage"
  },
  "bin": {
    "zun": "./bin/zun"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/law1024/zun"
  },
  "keywords": [
    "jscs",
    "jshint",
    "jslint",
    "csslint",
    "csshint",
    "htmllint",
    "htmlhint",
    "js-beautify",
    "cssbeautify",
    "htmlbeautify"
  ],
  "filter": [
    "js",
    "css",
    "html"
  ],
  "author": {
    "name": "law1024",
    "email": "haojie.degage@gmail.com"
  },
  "license": "MIT",
  "preferGlobal": true,
  "engines": {
    "node": ">=0.10"
  },
  "bugs": {
    "url": "https://github.com/law1024/zun/issues"
  },
  "homepage": "https://github.com/law1024/zun",
  "dependencies": {
    "colors": "^1.1.0",
    "cssbeautify": "^0.3.1",
    "csscomb": "^3.0.4",
    "esformatter": "^0.6.1",
    "fixmyjs": "^1.0.3",
    "htmlcs": "0.0.9",
    "inquirer": "^0.8.4",
    "js-beautify": "^1.5.5",
    "minimist": "^1.1.1",
    "opener": "^1.4.1",
    "q": "^1.4.0",
    "request": "^2.55.0",
    "svn-info": "^0.2.1",
    "svn-interface": "^0.4.4",
    "through2": "^0.6.5",
    "vinyl-fs": "^1.0.0"
  },
  "readme": "# zun\r\n\r\n百度前端代码格式化工具\r\n\r\n### 安装\r\n```\r\n    $ npm i zun -g\r\n```\r\n\r\n### 使用\r\n\r\nzun默认只对代码模块中新添加的和有修改的文件进行格式化处理，所以请确保当前目录处在svn的管理之下。同时，默认采取原文件覆盖模式。\r\n```\r\n    $ zun format(f)\r\n```\r\n\r\n如果修改的文件改动较少，且原有代码规范问题较多，可通过指定nomodify参数忽略修改的文件，只对新增文件格式化处理。\r\n```\r\n    $ zun format --nomodify\r\n```\r\n\r\n如果你对自己负责的模块很有把握，并且希望一次性格式化所有文件来减少后期代码规范的维护负担，可以使用all参数强制对所有文件进行格式化。\r\n```\r\n    $ zun format --all\r\n```\r\n\r\n指定格式化之后的文件输出路径，没有写明具体目录名则默认为当前目录下的output目录。\r\n```\r\n    $ zun format --directory your_directory\r\n```\r\n\r\n有一些无法避免的变量命名规范问题，如ajax数据中，后端吐出的json数据使用了下划线命名，遇到此种情况，可以使用icc参数+文件名的形式强制取消该文件的变量命名规范检查。\r\n```\r\n    $ zun format --icc filename\r\n```\r\n\r\n快速提交提交代码评审，此命令需配置zun-conf.json文件使用\r\n```\r\n    $ zun cooder\r\n```\r\n\r\n如果没有检测到zun-conf文件，则需要以参数的形式添加必要的属性。\r\n```\r\n    $zun cooder --subject \"subject\" --owner \"owner\" --reviewers \"reviewers\" --description \"description\" --token \"token\" --sendmail \"default false\"\r\n```\r\n\r\n#### zun-conf.json文件说明\r\n\r\n在当前活动路径下配置zun-conf.json文件，该文件提供了两个功能：对不需要格式化的文件（jquery等第三方文件）进行配置；设置cooder命令的属性内容。\r\n```\r\n{\r\n    \"cooder\": {\r\n        \"subject\": \"code review\",\r\n        \"owner\": \"wanghaojie01\",\r\n        \"reviewers\": \"wanghaojie01\",\r\n        \"description\": \"code review\",\r\n        \"token\": \"the token\"\r\n    },\r\n    \"ignore\": [\r\n        \"/static/js/core/*.js\",\r\n        \"/static/css/reset.css\"\r\n    ]\r\n}\r\n```\r\n\r\n该工具还在不断的完善之中，有好的意见或建议，欢迎提出。",
  "readmeFilename": "README.md",
  "gitHead": "28be5cf49b846acfb2919e6034c2206edaabf5c4",
  "_id": "zun@1.1.1",
  "_shasum": "df9d1a04164fd67eb3db0288aeafe8af57ff54dd",
  "_from": "zun@*"
}
